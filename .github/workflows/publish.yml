# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Publish YAAM

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  workflow_dispatch:
      
jobs:
  build:

    runs-on: windows-2022

    steps:
    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          show-progress: true
        
      - name: Get last tag name and last commit revision
        id: latest
        shell: pwsh
        run: |
          echo "git_tag=$((@(git tag -l) -split '\n') | select -last 1)" >> $env:GITHUB_OUTPUT
          echo "git_rev=${{ github.sha }}" >> $env:GITHUB_OUTPUT
          echo "git_rev_short=$("${{ github.sha }}".substring(0, 8))" >> $env:GITHUB_OUTPUT

    #   - name: Get original revision for current tag
    #     id: tag
    #     shell: pwsh
    #     run: |
    #       $current_tag_revision=$(@(git rev-list -n 1 ${{ steps.latest.outputs.git_tag }}))
    #       $current_tag_revision_short=$("$current_tag_revision".substring(0, 8))
    #       echo "git_rev=$current_tag_revision" >> $env:GITHUB_OUTPUT
    #       echo "git_rev_short=$current_tag_revision_short" >> $env:GITHUB_OUTPUT

      - name: Initialize MSVC developer tools
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: "x64"
          toolset: "14.*"
          
      - name: Set up Python distribution
        uses: actions/setup-python@v5
        with:
          python-version: "3.9.9"
          architecture: "x64"
          cache: pip
          
      - name: Get Python distribution info
        id: python
        shell: pwsh
        run: |
          echo "version=$(@(python -V).substring(7))" >> $env:GITHUB_OUTPUT
          echo "pythonpath=$(@(./scripts/find-pythonpath.ps1))" >> $env:GITHUB_OUTPUT

      - name: Echo last available build info
        shell: pwsh
        run: |
          echo "github.sha=${{ github.sha }}"
          echo "github.ref_name=${{ github.ref_name }}"
          echo "latest.git_tag=${{ steps.latest.outputs.git_tag }}"
          echo "latest.git_rev=${{ steps.latest.outputs.git_rev }}"
          echo "latest.git_rev_short=${{ steps.latest.outputs.git_rev_short }}"
          echo "python.version=${{ steps.python.outputs.version }}"
          echo "python.pythonpath=${{ steps.python.outputs.pythonpath }}"
        # echo "tag.git_rev=${{ steps.tag.outputs.git_rev }}"
        # echo "tag.git_rev_short=${{ steps.tag.outputs.git_rev_short }}"
              
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
          python ${{ steps.python.outputs.pythonpath }}/Scripts/pywin32_postinstall.py -install
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 150 chars wide
          flake8 src --count --exit-zero --max-complexity=10 --max-line-length=150 --statistics
          
      - name: Test with pytest
        shell: pwsh
        run: |
          $env:PYTHONPATH+=';./src/'
          pytest ./test/
          
      - name: Create string version
        id: build-version
        shell: pwsh
        run: |
            echo "short=$(@(./scripts/get-version-string.ps1 -tag ${{ steps.latest.outputs.git_tag }} -mode short))" >> $env:GITHUB_OUTPUT
            echo "complete=$(@(./scripts/get-version-string.ps1 -tag ${{ steps.latest.outputs.git_tag }} -revision ${{ steps.latest.outputs.git_rev_short }}))" >> $env:GITHUB_OUTPUT
            echo "build_date=$((Get-Date).ToString("yyyy-MM-dd"))" >> $env:GITHUB_OUTPUT
            echo "build_time=$((Get-Date).ToString("hh:mm:ss.fff"))" >> $env:GITHUB_OUTPUT

      - name: Build with nuitka
        shell: pwsh
        run: >
          .\nuitka-make.ps1
          -mode standalone
          -compiler msvc
          -lto
          -artifacts
          -tag ${{ steps.latest.outputs.git_tag }}
          -revision ${{ steps.latest.outputs.git_rev_short }}
          -pythonpath ${{ steps.python.outputs.pythonpath }}

      - name: Echo output files
        shell: pwsh
        run: |
          echo $(dir ${{ github.workspace }}/bin/standalone/msvc)
          echo $(dir ${{ github.workspace }}/bin/standalone/msvc/yaam)

      - name: Upload artifacts
        id: artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yaam-standalone-msvc-${{ steps.build-version.outputs.complete }}
          path: ${{ github.workspace }}/artifacts/yaam-standalone-msvc-${{ steps.build-version.outputs.complete }}.zip
          retention-days: 7
          overwrite: true
      
      - name: Test release changelog existence
        id: test-changelog-existence
        shell: pwsh
        run: |
          echo "file_exists=$(=$(@(Test-Path ${{ github.workspace }}/changelogs/v${{ steps.build-version.outputs.short }}.md)))" >> $env:GITHUB_OUTPUT

      - name: Release build artifacts
        if: steps.test-changelog-existence.outputs.file_exists == 'true' 
        id: release
        uses: ncipollo/release-action@v1
        with:
          name: YAAM release ${{ steps.build-version.outputs.datetime }} ${{ steps.latest.outputs.git_tag }}
          tag: ${{ steps.latest.outputs.git_tag }}
          bodyFile: ${{ github.workspace }}/changelogs/v${{ steps.build-version.outputs.short }}.md
          artifacts: ${{ github.workspace }}/artifacts/yaam-standalone-msvc-${{ steps.latest.outputs.git_tag }}.zip
          token: ${{ secrets.yaam_publish_token }}
          prerelease: ${{ Contains(steps.build-version.outputs.complete, 'alpha') || Contains(steps.build-version.outputs.complete, 'beta')  || Contains(steps.build-version.outputs.complete, 'preview')}}
          draft: ${{ Contains(steps.build-version.outputs.complete , 'test') || github.event_name != 'push'}}
          allowUpdates: true
          replacesArtifacts: true
